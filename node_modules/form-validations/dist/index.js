"use strict";
const type_checks_1 = require("type-checks");
function chain(...args) {
    return (value) => args.reduce((result, arg) => {
        const validOrMessage = arg(value);
        if (validOrMessage !== true) {
            result.push(validOrMessage);
        }
        return result;
    }, []);
}
exports.chain = chain;
function firstError(...args) {
    return (value) => {
        for (let i = 0; i < args.length; i++) {
            const validOrMessage = args[i](value);
            if (validOrMessage !== true) {
                return [validOrMessage];
            }
        }
        return [];
    };
}
exports.firstError = firstError;
const messages = {
    string: " is not of type string",
    number: " is not of type number",
    bool: " is not of type boolean",
    date: " date format must be 'YYYY-MM-DD'",
    dateTime: " dateTime format must be 'YYYY-MM-DD hh:mm:ss'",
    dateUTC: " date format must be UTC: 'YYYY-MM-DDThh:mm:ssZ'",
    required: "A non empty value is required"
};
const msg = (err, val, type) => type_checks_1.isUndef(err)
    ? String(val) + messages[type]
    : err;
const msgArr = (err, val, arr) => type_checks_1.isUndef(err)
    ? "'" + String(val) + "' is not one of: '" + arr.join("', '") + "'"
    : err;
// Validators
function validString(err) {
    return val => type_checks_1.isString(val) ? true : msg(err, val, "string");
}
exports.validString = validString;
function validNumber(err) {
    return val => type_checks_1.isNumber(val) ? true : msg(err, val, "number");
}
exports.validNumber = validNumber;
function validBool(err) {
    return val => type_checks_1.isBool(val) ? true : msg(err, val, "bool");
}
exports.validBool = validBool;
function validDateFormat(err) {
    return val => type_checks_1.isString(val) && type_checks_1.isFormatDate(val) ? true : msg(err, val, "date");
}
exports.validDateFormat = validDateFormat;
function validDateTimeFormat(err) {
    return val => type_checks_1.isString(val) && type_checks_1.isFormatDateTime(val) ? true : msg(err, val, "dateTime");
}
exports.validDateTimeFormat = validDateTimeFormat;
function validDateUTCFormat(err) {
    return val => type_checks_1.isString(val) && type_checks_1.isFormatDateUTC(val) ? true : msg(err, val, "dateUTC");
}
exports.validDateUTCFormat = validDateUTCFormat;
function oneOf(arr, err) {
    return val => !type_checks_1.isUndef(arr.find(item => item === val)) ? true : msgArr(err, val, arr);
}
exports.oneOf = oneOf;
function required(err) {
    return val => !type_checks_1.isNullOrUndef(val) && !type_checks_1.isEmpty(val) ? true : msg(err, "", "required");
}
exports.required = required;
// Normalizers
function normalizeBoolean(val) {
    if (type_checks_1.isBool(val)) {
        return val;
    }
    if (type_checks_1.isNumber(val)) {
        return val === 1;
    }
    if (val === "true" || val === "false") {
        return JSON.parse(val); // We"re safe here because of the if statement"
    }
    return false;
}
exports.normalizeBoolean = normalizeBoolean;
//# sourceMappingURL=index.js.map